<?xml version="1.0"?>

<launch>
  <arg name="ip_left" default="192.168.1.101"/>
  <arg name="ip_right" default="192.168.1.102"/>
  <arg name="limited" default="false"/>
  <arg name="min_payload"  default="0.0"/>
  <arg name="max_payload"  default="5.0"/>
  <arg name="prefix_left" default="left_" />
  <arg name="prefix_right" default="right_" />
  <arg name="controller_name_left" default="left"/>
  <arg name="controller_name_right" default="right"/>
  <arg name="max_velocity_left" default="5.0"/> <!-- [rad/s] -->
  <arg name="max_velocity_right" default="5.0"/> <!-- [rad/s] -->

  <!-- dual_arm_robot model -->
  <include file="$(find dual_arm_robot_description)/launch/dual_arm_robot_upload.launch">
    <arg name="limited" value="$(arg limited)"/>
    <arg name="prefix_left" value="$(arg prefix_left)"/>
    <arg name="prefix_right" value="$(arg prefix_right)"/>
  </include>

  <!-- ::: left driver ::: -->
  <group ns="$(arg controller_name_left)">
    <remap from="joint_states" to="/joint_states"/>
    <!-- left hardware interface -->
    <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver" output="screen" launch-prefix="">
      <param name="robot_ip_address" type="str" value="$(arg ip_left)"/>
      <param name="min_payload" type="double" value="$(arg min_payload)"/>
      <param name="max_payload" type="double" value="$(arg max_payload)"/>
      <param name="max_velocity" type="double" value="$(arg max_velocity_left)"/>
      <param name="use_ros_control" type="bool" value="True"/>
      <param name="prefix" value="$(arg prefix_left)" />
    </node>
    
    <!-- left controller settings -->
    <rosparam file="$(find dual_arm_robot_driver)/config/left_controllers.yaml" command="load"/>

    <!-- left spawn controller manager -->
    <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="left_joint_state_controller left_force_torque_sensor_controller left_vel_based_pos_traj_controller --shutdown-timeout 1" />

    <!-- left load other controllers (admittance controller) -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="load left_vel_based_admittance_traj_controller" />

    <!-- left Convert joint states to /tf tranforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  </group>


  <!-- ::: right driver ::: -->
  <group ns="$(arg controller_name_right)">
    <remap from="joint_states" to="/joint_states"/>
    <!-- right hardware interface -->
    <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver" output="screen" launch-prefix="">
      <param name="reverse_port" type="int" value="5002"/>
      <param name="robot_ip_address" type="str" value="$(arg ip_right)"/>
      <param name="min_payload" type="double" value="$(arg min_payload)"/>
      <param name="max_payload" type="double" value="$(arg max_payload)"/>
      <param name="max_velocity" type="double" value="$(arg max_velocity_right)"/>
      <param name="use_ros_control" type="bool" value="True"/>
      <param name="prefix" value="$(arg prefix_right)" />
    </node>
    
    <!-- right controller settings -->
    <rosparam file="$(find dual_arm_robot_driver)/config/right_controllers.yaml" command="load"/>

    <!-- right spawn controller manager -->
    <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
    output="screen" args="right_joint_state_controller right_force_torque_sensor_controller right_vel_based_pos_traj_controller --shutdown-timeout 1" />

    <!-- right load other controllers (admittance controller) -->
    <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false"
    output="screen" args="load right_vel_based_admittance_traj_controller" />

    <!-- right Convert joint states to /tf tranforms -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  </group>

</launch>
